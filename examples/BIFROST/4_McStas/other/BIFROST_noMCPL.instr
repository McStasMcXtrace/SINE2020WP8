/*******************************************************************************
* Instrument: ESS_butterfly_MCPL_test
*
* %I
* Written by: Peter Willendrup <pkwi@fysik.dtu.dk>
* Date: 2016-09-26
* Origin: ESS
* %INSTRUMENT_SITE: ESS
*
* Test instrument for the updated BF1 butterfly moderator design using MCPL input
*
* %D
* Test instrument for the updated BF1 butterfly moderator design using MCPL input files.
* 
* The below example gives a 50-50 (statistics-wise) cold/thermal beam at beamline N10.
* Example: mcrun -n1e6 ESS_butterfly_MCPL_test.instr sector=N beamline=10 cold=0.5
*
* Assumes access to binary MCPL datasets in . named [sector][beamline].mcpl.gz, i.e. W8.mcpl.gz.
*
* %P
* sector:        [str]  Defines the 'sector' of your instrument position. Valid values are "N","S","E" and "W"
* beamline:      [1]    Defines the 'beamline number' of your instrument position. Valid values are 1..10 or 1..11 depending on sector
* Lmin:          [AA]   Minimum wavelength simulated
* Lmax:          [AA]   Maximum wavelength simulated
* c_performance: [1]    Cold brilliance scalar performance multiplicator c_performance > 0
* t_performance: [1]    Thermal brilliance scalar performance multiplicator t_performance > 0
* index:         [1]    Target index for source focusing. Defaults to illuminate the "cold collimated" brilliance monitor, thereby suppressing "dist"
* dist:          [m]    Distance from origin to focusing rectangle; at (0,0,dist) - alternatively use target_index
* cold:          [1]    Defines the statistical fraction of events emitted from the cold part of the moderator
* Yheight:       [m]    Defines the moderator height. Valid values are 0.03 m and 0.06 m
* delta:         [m]    Parameter that allows to scan "collimator" position
*
* %L
* <reference/HTML link>
* Benchmarking website available at <a href="http://ess_butterfly.mcstas.org">http://ess_butterfly.mcstas.org</a>
* %E
*******************************************************************************/
DEFINE INSTRUMENT BIFROST_MCPL(MCPL=0,CHOPPERS=0,string sector="W",int beamline=4,Lmin=0.2,Lmax=20,c_performance=1,t_performance=1,int index=8,dist=0,cold=1,Yheight=0.03,delta=0,thres=0.003,filter=0,repeat=1,E_smear=0.1,pos_smear=0.01,dir_smear=0.01,
			       WaveMin=0.1, // Minimum wavelength from moderator
WaveMax=99.5, // Maximum wavelength from moderator
pin_holeY = 0.088,   // Height of pinhole at pulse shapping chopper position (0.088 matches guide).
pin_holeX=0.03,  // Width of pinhole at pulse shapping chopper position (0.03 matches guide).
E_0=4.0, // Lowest energy in wavelength band.
L_0=0, // Alternative: Lowest wavelength in wavelength band
chopPulseOpening=0.004, // Opening time of pulse shapping chopper [s]
chopPulseFrequencyOrder=14, // Number of chopper pulses pr moderator pulse. It will automatically be reduced when nesesary and a warning will be written in the promt. 
sampleSizeX=0.010, // Width of monitors at sample position. Guide optimized for up to 0.015, intruments optimized for 0.001 to 0.01.
sampleSizeY=0.010, // Height of monitors at sample position. Guide optimized for up to 0.015, intruments optimized for 0.001 to 0.01.
chopBWPos=78,  // Distance from pulse shapping choppers to BW Chopper
DivSlit0_width=0.1, // opening of Divergence Slit nr 0
DivSlit1_width=0.1,  // opening of Divergence Slit nr 1
DivSlit2_width=0.1,  // opening of Divergence Slit nr 2
DivSlit3_width=0.1,  // opening of Divergence Slit nr 3
BWopen=172.33,
FOCopen1=37.79,
FOCopen2=51.63,
Npulse=1,
PscOff=0.0306,
discD=0.04,
monigap_length = 0.02, // Length of the moni-gap
int print=0, // print values of interest for debugging. McTrace does not work when this is set to 1.
makeVirtualSource=0, // if 1 print all neutrons to virtual source file 
int printMValues=0,
ROT=0.0,
TX=0.0,
TY=0.0,
TZ=0.0,
Center=0)

DECLARE
%{

  
  // M-value and element length arrays
double elementLength6S[150];
double mValues6verticalS[150];
double mValues6horizontalS[150];
double elementLength3S[150];
double mValues3verticalS[150];
double mValues3horizontalS[150];
double elementLength1S[150];
double mValues1verticalS[150];
double mValues1horizontalS[150];

double x_div;
double y_div;
int flag;
double u = 1e-5;

/*************************************** Chopper Variables  *******************************************/

double lambda_0; double lambda_1;
double v_0; double v_1;
double InstLength;
double chopPulseOffset;  double chopPulsePhaseOffset;  double chopPulseDist; double chopPulseOpen; 
double chopPulse2PhaseOffset;
double chopFrameOverlap1Offset;   double chopFrameOverlap1PhaseOffset; //double chopFrameOverlap1Pos; 
double chopFrameOverlap1Open;
double chopFrameOverlap2Offset;   double chopFrameOverlap2PhaseOffset; //double chopFrameOverlap2Pos; 
double chopFrameOverlap2Open;
double chopBWOffset;   double chopBWPhaseOffset; //double chopBWPos; 
double chopBWOpen;
double t_samp_center; double t_samp_0; double t_samp_1;
double chopBW_t0; double  chopBW_t1;

double PulseHighFluxOffset;
double WavelengthBand;
double ModPulseLengthHighF;
double chopPulsePossibleOpening;


/////  Martin's cutting parameters:
double sample_dist = 0.5;
double startXposition_straight = 49.303484;


double length5 = 17.995800;
//double benderStartXposition =6.380700;
double benderStartXposition =24.376254 ;

// straiht:
double length2 = 90.0;

// Focus ellipse:
double length1 = 22.114200;
double Linx1 = 24.364542;
double Loutx1 = 2.250342;
double Liny1 = 23.034433;
double Louty1 = 0.920233;
double alpha1 = 3.1;
double Qc1 = 0.021700;
double R01 = 0.990000;
double smallaxis_y1 = 0.090000/2;
double smallaxis_x1 = 0.060000/2;



double elementLength1_part_1[50]; 
double mValues1vertical_part_1[50]; 
double mValues1horizontal_part_1[50];
double elementLength1_part_2[5]; 
double mValues1vertical_part_2[5]; 
double mValues1horizontal_part_2[5];
double elementLength1_part_3[5]; 
double mValues1vertical_part_3[5]; 
double mValues1horizontal_part_3[5];
double elementLength1_part_4[5]; 
double mValues1vertical_part_4[5]; 
double mValues1horizontal_part_4[5];

int counter = 0;

double chopper_coordinate_offset = 4.439;


double curve_rot = 0; // has to be either 180 or -180. Determines curve to left or right

double chopFrameOverlap1Pos;
double chopFrameOverlap2Pos;

// These parameters are no longer safe to change
double DivSlit0Gap=0.02; // Hole in guide required for Divergence slit nr 0 (at the end of guide)
double DivSlit1Gap=0.02; // Hole in guide required for Divergence slit nr 1
double DivSlit2Gap=0.02; // Hole in guide required for Divergence slit nr 2
double DivSlit3Gap=0.02; // Hole in guide required for Divergence slit nr 3

double DivSlit1Pos=1.0814;  // Position of Divergence Slit nr 1
double DivSlit2Pos=1.661; // Position of Divergence Slit nr 2
double DivSlit3Pos=2.961; // Position of Divergence Slit nr 3
// Old divJaw pos:
//double DivSlit1Pos=1.191;  // Position of Divergence Slit nr 1
//double DivSlit2Pos=1.661; // Position of Divergence Slit nr 2
//double DivSlit3Pos=2.961; // Position of Divergence Slit nr 3
double chopGap=0.04;
double BW_chopGap=0.04;
double chopFrameOverlap1Pos= 8.530;    // Distance from moderator to first frame owerlap chopper
double chopFrameOverlap2Pos= 14.973;    // Distance from moderator to second frame owerlap chopper

double benderAngle = 0.01886551; // Mads numbers = 0.0183513513514;

int i;   

  
  int IsCold;
  double SrcX, SrcY, SrcZ;
  double Theta;
  double MonTransl;
  double XW, YH;
  char options1[256],options2[256],options3[256],options4[256];
  char srcdef[128];
  double WidthC=0.072,WidthT=0.108;
  double WL;
  double lambdamin, lambdamax;
  double CCold,CThermal;
  double SurfSign;
  double TCollmin;
  double TCollmax;
  double Emin,Emax;
  double EminTh=20, EmaxTh=100, EminC=0, EmaxC=20;
  double Eneutron;
  /* 10 beamlines in sector N and E  - plus one location added for drawing */
  double iBeamlinesN[] = { 30.0,  36.0,  42.0,  48.0,  54.0,  60.0,  66.0,  72.0,  78.0,  84.0,  90.0};
  double iBeamlinesE[] = {-30.0, -36.0, -42.0, -48.0, -54.0, -60.0, -66.0, -72.0, -78.0, -84.0, -90.0};
  /* 11 beamlines in sector S and W - plus one location added for drawing */
  double iBeamlinesW[] = { 150.0,  144.7,  138.0,  132.7,  126.0,  120.7,  114.0,  108.7,  102.0,  96.7,  90.0,  84.0};
  double iBeamlinesS[] = {-150.0, -144.7, -138.0, -132.7, -126.0, -120.7, -114.0, -108.7, -102.0, -96.7, -90.0, -84.0};
  double* iBeamlines;
  double ANGLE;
  double DeltaX,DeltaZ;
  char MCPLfile[128];
  double T0,L0;

  double calcAlpha(double length, double radius) {
    // calculate angle of arm after curved guide
    return RAD2DEG * length/radius;
  }	
  
  double calcX(double length, double radius) {
    // calculate position and angle of arm after curved guide
    double alpha = DEG2RAD * calcAlpha(length, radius);
    return radius*(1.0-cos(alpha));
  }	
  
  double calcZ(double length, double radius) {
    // calculate position and angle of arm after curved guide
    double alpha = DEG2RAD * calcAlpha(length, radius);
    return radius*sin(alpha);
  }
%}

INITIALIZE
%{

  
// If there is set a value of L_0, overwrite E_0 and calculate E_0 from L_0 
if (L_0>0){
	E_0=81.82/(L_0*L_0);
}



// Following is all the m-values for the entire guide hardcoaded in arrays along with the element lengths for each m-value. 
// It is important to note that the naming convention here goes the opposite way of the neutron path, meaning that mValues1 describes the m-values on the element closest to the sample and mValues6 are closest to the source.

 //// Part 1 //// 
 elementLength1_part_1[0] = 0.50000; 
 mValues1vertical_part_1[0] = 1.50; 
 mValues1horizontal_part_1[0] = 1.50;

 elementLength1_part_1[1] = 0.50000; 
 mValues1vertical_part_1[1] = 1.50; 
 mValues1horizontal_part_1[1] = 1.50;

 elementLength1_part_1[2] = 0.50000; 
 mValues1vertical_part_1[2] = 1.50; 
 mValues1horizontal_part_1[2] = 1.50;

 elementLength1_part_1[3] = 0.50000; 
 mValues1vertical_part_1[3] = 1.50; 
 mValues1horizontal_part_1[3] = 1.50;

 elementLength1_part_1[4] = 0.50000; 
 mValues1vertical_part_1[4] = 1.50; 
 mValues1horizontal_part_1[4] = 1.50;

 elementLength1_part_1[5] = 0.50000; 
 mValues1vertical_part_1[5] = 1.50; 
 mValues1horizontal_part_1[5] = 1.50;

 elementLength1_part_1[6] = 0.50000; 
 mValues1vertical_part_1[6] = 1.50; 
 mValues1horizontal_part_1[6] = 1.50;

 elementLength1_part_1[7] = 0.50000; 
 mValues1vertical_part_1[7] = 1.50; 
 mValues1horizontal_part_1[7] = 1.50;

 elementLength1_part_1[8] = 0.50000; 
 mValues1vertical_part_1[8] = 1.50; 
 mValues1horizontal_part_1[8] = 1.50;

 elementLength1_part_1[9] = 0.50000; 
 mValues1vertical_part_1[9] = 1.50; 
 mValues1horizontal_part_1[9] = 1.50;

 elementLength1_part_1[10] = 0.50000; 
 mValues1vertical_part_1[10] = 1.50; 
 mValues1horizontal_part_1[10] = 1.50;

 elementLength1_part_1[11] = 0.50000; 
 mValues1vertical_part_1[11] = 1.50; 
 mValues1horizontal_part_1[11] = 1.50;

 elementLength1_part_1[12] = 0.50000; 
 mValues1vertical_part_1[12] = 1.50; 
 mValues1horizontal_part_1[12] = 1.50;

 elementLength1_part_1[13] = 0.50000; 
 mValues1vertical_part_1[13] = 1.50; 
 mValues1horizontal_part_1[13] = 1.50;

 elementLength1_part_1[14] = 0.50000; 
 mValues1vertical_part_1[14] = 1.50; 
 mValues1horizontal_part_1[14] = 1.50;

 elementLength1_part_1[15] = 0.50000; 
 mValues1vertical_part_1[15] = 1.50; 
 mValues1horizontal_part_1[15] = 1.50;

 elementLength1_part_1[16] = 0.50000; 
 mValues1vertical_part_1[16] = 1.50; 
 mValues1horizontal_part_1[16] = 1.50;

 elementLength1_part_1[17] = 0.50000; 
 mValues1vertical_part_1[17] = 1.50; 
 mValues1horizontal_part_1[17] = 1.50;

 elementLength1_part_1[18] = 0.50000; 
 mValues1vertical_part_1[18] = 1.50; 
 mValues1horizontal_part_1[18] = 1.50;

 elementLength1_part_1[19] = 0.50000; 
 mValues1vertical_part_1[19] = 1.50; 
 mValues1horizontal_part_1[19] = 1.50;

 elementLength1_part_1[20] = 0.50000; 
 mValues1vertical_part_1[20] = 1.50; 
 mValues1horizontal_part_1[20] = 1.50;

 elementLength1_part_1[21] = 0.50000; 
 mValues1vertical_part_1[21] = 1.50; 
 mValues1horizontal_part_1[21] = 1.50;

 elementLength1_part_1[22] = 0.50000; 
 mValues1vertical_part_1[22] = 2.00; 
 mValues1horizontal_part_1[22] = 1.50;

 elementLength1_part_1[23] = 0.50000; 
 mValues1vertical_part_1[23] = 2.00; 
 mValues1horizontal_part_1[23] = 1.50;

 elementLength1_part_1[24] = 0.50000; 
 mValues1vertical_part_1[24] = 2.00; 
 mValues1horizontal_part_1[24] = 1.50;

 elementLength1_part_1[25] = 0.50000; 
 mValues1vertical_part_1[25] = 2.00; 
 mValues1horizontal_part_1[25] = 1.50;

 elementLength1_part_1[26] = 0.50000; 
 mValues1vertical_part_1[26] = 2.00; 
 mValues1horizontal_part_1[26] = 1.50;

 elementLength1_part_1[27] = 0.50000; 
 mValues1vertical_part_1[27] = 2.00; 
 mValues1horizontal_part_1[27] = 1.50;

 elementLength1_part_1[28] = 0.50000; 
 mValues1vertical_part_1[28] = 2.00; 
 mValues1horizontal_part_1[28] = 1.50;

 elementLength1_part_1[29] = 0.50000; 
 mValues1vertical_part_1[29] = 2.00; 
 mValues1horizontal_part_1[29] = 1.50;

 elementLength1_part_1[30] = 0.50000; 
 mValues1vertical_part_1[30] = 2.00; 
 mValues1horizontal_part_1[30] = 1.50;

 elementLength1_part_1[31] = 0.50000; 
 mValues1vertical_part_1[31] = 2.00; 
 mValues1horizontal_part_1[31] = 1.50;

 elementLength1_part_1[32] = 0.50000; 
 mValues1vertical_part_1[32] = 2.00; 
 mValues1horizontal_part_1[32] = 2.00;

 elementLength1_part_1[33] = 0.50000; 
 mValues1vertical_part_1[33] = 2.00; 
 mValues1horizontal_part_1[33] = 2.00;

 elementLength1_part_1[34] = 0.50000; 
 mValues1vertical_part_1[34] = 2.00; 
 mValues1horizontal_part_1[34] = 2.00;

 elementLength1_part_1[35] = 0.50000; 
 mValues1vertical_part_1[35] = 2.00; 
 mValues1horizontal_part_1[35] = 2.00;

 elementLength1_part_1[36] = 0.01580;  // Gap 
 mValues1vertical_part_1[36] = 0.00; 
 mValues1horizontal_part_1[36] = 0.00;

 elementLength1_part_1[37] = 0.48420; 
 mValues1vertical_part_1[37] = 2.00; 
 mValues1horizontal_part_1[37] = 2.00;

 elementLength1_part_1[38] = 0.50000; 
 mValues1vertical_part_1[38] = 2.00; 
 mValues1horizontal_part_1[38] = 2.50;

 elementLength1_part_1[39] = 0.50000; 
 mValues1vertical_part_1[39] = 2.50; 
 mValues1horizontal_part_1[39] = 2.50;

 elementLength1_part_1[40] = 0.14320; 
 mValues1vertical_part_1[40] = 2.50; 
 mValues1horizontal_part_1[40] = 2.50;

 
 //// Part 2 //// 
 elementLength1_part_2[0] = 0.31680; 
 mValues1vertical_part_2[0] = 2.50; 
 mValues1horizontal_part_2[0] = 2.50;

 elementLength1_part_2[1] = 0.50000; 
 mValues1vertical_part_2[1] = 3.00; 
 mValues1horizontal_part_2[1] = 3.00;

 elementLength1_part_2[2] = 0.46320; 
 mValues1vertical_part_2[2] = 3.00; 
 mValues1horizontal_part_2[2] = 3.00;

 
 //// Part 3 //// 
 elementLength1_part_3[0] = 0.0596; 
 mValues1vertical_part_3[0] = 3.00; 
 mValues1horizontal_part_3[0] = 3.00;

 elementLength1_part_3[1] = 0.500; 
 mValues1vertical_part_3[1] = 3.50; 
 mValues1horizontal_part_3[1] = 3.00;

 
 //// Part 4 //// 
 elementLength1_part_4[0] = 0.06670 ; 
 mValues1vertical_part_4[0] = 3.50; 
 mValues1horizontal_part_4[0] = 3.00;

 elementLength1_part_4[1] = 0.50000; 
 mValues1vertical_part_4[1] = 3.50; 
 mValues1horizontal_part_4[1] = 3.5;

// A bit extra due to mismatch in coating lengths after rounding element length to 0.5 meters:
// 0.47 cm of this is applied in last tested version (sep 12 2018)
 elementLength1_part_4[2] = 0.0047;  
 mValues1vertical_part_4[2] = 3.50; 
 mValues1horizontal_part_4[2] = 3.5;


elementLength3S[0]=0.50;
mValues3verticalS[0]=2.000000;
mValues3horizontalS[0]=2.500000;
elementLength3S[1]=0.50;
mValues3verticalS[1]=2.000000;
mValues3horizontalS[1]=2.500000;
elementLength3S[2]=0.50;
mValues3verticalS[2]=2.000000;
mValues3horizontalS[2]=2.500000;
elementLength3S[3]=0.50;
mValues3verticalS[3]=2.000000;
mValues3horizontalS[3]=2.500000;
elementLength3S[4]=0.50;
mValues3verticalS[4]=2.000000;
mValues3horizontalS[4]=2.500000;
elementLength3S[5]=0.50;
mValues3verticalS[5]=2.000000;
mValues3horizontalS[5]=2.500000;
elementLength3S[6]=0.50;
mValues3verticalS[6]=2.000000;
mValues3horizontalS[6]=2.500000;

// Moni gap
elementLength3S[7]=monigap_length;
mValues3verticalS[7]=0;
mValues3horizontalS[7]=0;


elementLength3S[7+1]=0.50-monigap_length;
mValues3verticalS[7+1]=2.000000;
mValues3horizontalS[7+1]=2.000000;
elementLength3S[8+1]=0.50;
mValues3verticalS[8+1]=2.000000;
mValues3horizontalS[8+1]=2.000000;
elementLength3S[9+1]=0.50;
mValues3verticalS[9+1]=2.000000;
mValues3horizontalS[9+1]=2.000000;
elementLength3S[10+1]=0.50;
mValues3verticalS[10+1]=2.000000;
mValues3horizontalS[10+1]=2.000000;
elementLength3S[11+1]=0.50;
mValues3verticalS[11+1]=2.000000;
mValues3horizontalS[11+1]=2.000000;
elementLength3S[12+1]=0.50;
mValues3verticalS[12+1]=2.000000;
mValues3horizontalS[12+1]=2.000000;
elementLength3S[13+1]=0.50;
mValues3verticalS[13+1]=1.500000;
mValues3horizontalS[13+1]=2.000000;
elementLength3S[14+1]=0.50;
mValues3verticalS[14+1]=1.500000;
mValues3horizontalS[14+1]=2.000000;
elementLength3S[15+1]=0.50;
mValues3verticalS[15+1]=1.500000;
mValues3horizontalS[15+1]=2.000000;
elementLength3S[16+1]=0.50;
mValues3verticalS[16+1]=1.500000;
mValues3horizontalS[16+1]=2.000000;
elementLength3S[17+1]=0.50;
mValues3verticalS[17+1]=1.500000;
mValues3horizontalS[17+1]=2.000000;
elementLength3S[18+1]=0.50;
mValues3verticalS[18+1]=1.500000;
mValues3horizontalS[18+1]=2.000000;
elementLength3S[19+1]=0.50;
mValues3verticalS[19+1]=1.500000;
mValues3horizontalS[19+1]=2.000000;
elementLength3S[20+1]=0.50;
mValues3verticalS[20+1]=1.500000;
mValues3horizontalS[20+1]=2.000000;
elementLength3S[21+1]=0.50;
mValues3verticalS[21+1]=1.500000;
mValues3horizontalS[21+1]=2.000000;
elementLength3S[22+1]=0.50;
mValues3verticalS[22+1]=1.500000;
mValues3horizontalS[22+1]=2.000000;
elementLength3S[23+1]=0.50;
mValues3verticalS[23+1]=1.500000;
mValues3horizontalS[23+1]=1.500000;
elementLength3S[24+1]=0.50;
mValues3verticalS[24+1]=1.500000;
mValues3horizontalS[24+1]=1.500000;
elementLength3S[25+1]=0.50;
mValues3verticalS[25+1]=1.500000;
mValues3horizontalS[25+1]=1.500000;
elementLength3S[26+1]=0.50;
mValues3verticalS[26+1]=1.500000;
mValues3horizontalS[26+1]=1.500000;
elementLength3S[27+1]=0.50;
mValues3verticalS[27+1]=1.500000;
mValues3horizontalS[27+1]=1.500000;
elementLength3S[28+1]=0.50;
mValues3verticalS[28+1]=1.500000;
mValues3horizontalS[28+1]=1.500000;
elementLength3S[29+1]=0.50;
mValues3verticalS[29+1]=1.500000;
mValues3horizontalS[29+1]=1.500000;
elementLength3S[30+1]=0.50;
mValues3verticalS[30+1]=1.500000;
mValues3horizontalS[30+1]=1.500000;
elementLength3S[31+1]=0.50;
mValues3verticalS[31+1]=1.500000;
mValues3horizontalS[31+1]=1.500000;
elementLength3S[32+1]=0.50;
mValues3verticalS[32+1]=1.500000;
mValues3horizontalS[32+1]=1.500000;
elementLength3S[33+1]=0.50;
mValues3verticalS[33+1]=1.500000;
mValues3horizontalS[33+1]=1.500000;
elementLength3S[34+1]=0.50;
mValues3verticalS[34+1]=1.500000;
mValues3horizontalS[34+1]=1.500000;
elementLength3S[35+1]=0.50;
mValues3verticalS[35+1]=1.500000;
mValues3horizontalS[35+1]=1.500000;
elementLength3S[36+1]=0.50;
mValues3verticalS[36+1]=1.500000;
mValues3horizontalS[36+1]=1.500000;
elementLength3S[37+1]=0.50;
mValues3verticalS[37+1]=1.500000;
mValues3horizontalS[37+1]=1.500000;
elementLength3S[38+1]=0.50;
mValues3verticalS[38+1]=1.500000;
mValues3horizontalS[38+1]=1.500000;
elementLength3S[39+1]=0.50;
mValues3verticalS[39+1]=1.500000;
mValues3horizontalS[39+1]=1.500000;
elementLength3S[40+1]=0.50;
mValues3verticalS[40+1]=1.500000;
mValues3horizontalS[40+1]=1.500000;
elementLength3S[41+1]=0.50;
mValues3verticalS[41+1]=1.500000;
mValues3horizontalS[41+1]=1.500000;
elementLength3S[42+1]=0.50;
mValues3verticalS[42+1]=1.500000;
mValues3horizontalS[42+1]=1.500000;
elementLength3S[43+1]=0.50;
mValues3verticalS[43+1]=1.500000;
mValues3horizontalS[43+1]=1.500000;
elementLength3S[44+1]=0.50;
mValues3verticalS[44+1]=1.500000;
mValues3horizontalS[44+1]=1.500000;
elementLength3S[45+1]=0.50;
mValues3verticalS[45+1]=1.500000;
mValues3horizontalS[45+1]=1.500000;
elementLength3S[46+1]=0.50;
mValues3verticalS[46+1]=1.500000;
mValues3horizontalS[46+1]=1.500000;
elementLength3S[47+1]=0.50;
mValues3verticalS[47+1]=1.500000;
mValues3horizontalS[47+1]=1.500000;
elementLength3S[48+1]=0.50;
mValues3verticalS[48+1]=1.500000;
mValues3horizontalS[48+1]=1.500000;
elementLength3S[49+1]=0.50 - 0.0712; // Slightly shorter segment last
mValues3verticalS[49+1]=1.500000;
mValues3horizontalS[49+1]=1.500000;


elementLength6S[0]=0.488444444444444;
mValues6verticalS[0]=3.500000;
mValues6horizontalS[0]=3.000000;
elementLength6S[1]=0.488444444444444;
mValues6verticalS[1]=3.500000;
mValues6horizontalS[1]=3.000000;
elementLength6S[2]=0.488444444444444;
mValues6verticalS[2]=3.000000;
mValues6horizontalS[2]=2.500000;
elementLength6S[3]=0.488444444444444;
mValues6verticalS[3]=3.000000;
mValues6horizontalS[3]=2.500000;
elementLength6S[4]=0.488444444444444;
mValues6verticalS[4]=2.500000;
mValues6horizontalS[4]=2.500000;
elementLength6S[5]=0.488444444444444;
mValues6verticalS[5]=2.500000;
mValues6horizontalS[5]=2.000000;
elementLength6S[6]=0.488444444444444;
mValues6verticalS[6]=2.500000;
mValues6horizontalS[6]=1.500000;

elementLength6S[7]=0.061218888888892 ; // Shorter due to window #1
mValues6verticalS[7]=2.500000;
mValues6horizontalS[7]=1.500000;

elementLength6S[8]=0.02349; // feeder window #1
mValues6verticalS[8]=0;
mValues6horizontalS[8]=0;

elementLength6S[9]=0.488444444444444 - 0.061218888888892 - 0.02349; // End of piece 7 (the window and start of the mirror si substracted from its length)
mValues6verticalS[9]=2.000000;
mValues6horizontalS[9]=1.500000;

elementLength6S[10]=0.076264444; // shorter due to window #2
mValues6verticalS[10]=2.000000;
mValues6horizontalS[10]=1.500000;

elementLength6S[11]=0.015; // feeder window #2
mValues6verticalS[11]=0;
mValues6horizontalS[11]=0;

elementLength6S[12]=0.488444444444444 - 0.015 - 0.076264444 - 0.00047; // End of Feeder (after window 2)
mValues6verticalS[12]=2.0;
mValues6horizontalS[12]=1.5;

/************************************************/
/*                  Chopper calculations                    */
/************************************************/
 
PulseHighFluxOffset=2.0e-4; // Time from T0 to high pulse.
ModPulseLengthHighF=2.86e-3; // width of high pulse

InstLength=162.0;
chopPulseDist= 4.41+0.032+2.0-0.1;  // Distance fro moderator to Pulse chapping chopper
//chopFrameOverlap1Pos= 2.0;    // Distance from pulse shapping choppers to first frame owerlap chopper
//chopFrameOverlap2Pos=7.0;     // Distance from pulse shapping choppers to second frame owerlap chopper
//chopBWPos=71.4403;           // Distance from pulse shapping choppers to tail romval chopper

if  (chopPulseFrequencyOrder*chopPulseOpening > 170.0/360.0/14.0) {    /******* Check if pulse shapping chopper opening is large enough for requested frequency or reduce frequency *******/
	 chopPulseFrequencyOrder=floor(170.0/360.0/14.0/chopPulseOpening);
	printf(" \n \n Warning: Impossible combination of chopPulseFrequencyOrder and chopPulseOpening chosen, chopPulseFrequencyOrder reduced to: %f  \n", chopPulseFrequencyOrder);
}

lambda_1=1.0/(0.1106*sqrt(E_0));  /**** general chopper calculations **********/
WavelengthBand = 1/(InstLength-chopPulseDist)/14.0/2.528e-4;
lambda_0=lambda_1-WavelengthBand;
v_0=3956.0/lambda_1;  
v_1=3956.0/lambda_0;

t_samp_center=PulseHighFluxOffset+ModPulseLengthHighF/2.0+(InstLength/v_1+InstLength/v_0)/2.0;
t_samp_0=t_samp_center-1.0/14.0/2.0;
t_samp_1=t_samp_center+1.0/14.0/2.0;

/***********  Pulse shaping chopper calculations **********/
chopPulseOffset=(chopPulseDist/v_1+chopPulseDist/v_0)/2.0+ModPulseLengthHighF/2.0+PulseHighFluxOffset;
chopPulsePossibleOpening=chopPulseDist/v_0-chopPulseOffset;
chopPulsePhaseOffset=  (chopPulseOffset+ chopPulseOpening/2.0)*14.0*chopPulseFrequencyOrder*360.0-170.0/2.0;
chopPulse2PhaseOffset= chopPulsePhaseOffset- 360.0*(chopPulseOpening*14.0*chopPulseFrequencyOrder)+170.0;

if  (chopPulseFrequencyOrder == 0) { 
	chopPulsePhaseOffset= 0;
	chopPulse2PhaseOffset= 0;
		printf(" \n \n Warning: Pulse shaping chopper parked! Setting the offsets to zero");
}


/*********** Frame Overlap chopper calculations ******************/
chopFrameOverlap1Open= 1.0/14.0/InstLength*(chopFrameOverlap1Pos)*1.5 ;
chopFrameOverlap1Offset=(  ( (chopFrameOverlap1Pos)/v_1+(chopFrameOverlap1Pos)/v_0)/2.0+PulseHighFluxOffset+ModPulseLengthHighF/2.0) ;
chopFrameOverlap1PhaseOffset=  (chopFrameOverlap1Offset)*14.0*360.0;

chopFrameOverlap2Open= 1.0/14.0/InstLength*(chopFrameOverlap2Pos)*1.65 ;
chopFrameOverlap2Offset=(  ( (chopFrameOverlap2Pos)/v_1+(chopFrameOverlap2Pos)/v_0)/2.0+PulseHighFluxOffset+ModPulseLengthHighF/2.0) ;
chopFrameOverlap2PhaseOffset=  (chopFrameOverlap2Offset)*14.0*360.0;

/********** Bandwidth chopper calculations ****************/

//chopBW_t0= chopPulseOffset-chopPulseOpening/2.0 + (t_samp_0-(chopPulseOffset-chopPulseOpening/2.0)) / (InstLength-chopPulseDist) * (InstLength-chopBWPos) ;
//chopBW_t1= chopPulseOffset+chopPulseOpening/2.0 + (t_samp_1-(chopPulseOffset+chopPulseOpening/2.0)) / (InstLength-chopPulseDist) * (InstLength-chopBWPos);
chopBW_t0= PulseHighFluxOffset+ModPulseLengthHighF/2.0 + chopBWPos/v_1;
chopBW_t1=  PulseHighFluxOffset+ModPulseLengthHighF/2.0 + chopBWPos/v_0;

chopBWOpen= 360.0/InstLength*(chopBWPos-chopPulseDist*1); //Here Jonas put a multiplier on the choppulsedist
chopBWOffset=(chopBW_t0+chopBW_t1)/2.0;
chopBWPhaseOffset=  (chopBWOffset)*14.0*360.0;

if (printMValues==1) {
	// Will print all coating values to a file if this is toggled on 
	FILE* fp = fopen("CoatingDistributions.txt", "w");
	fprintf(fp,"Coating Distributions. From moderator towards sample:\n");
	fprintf(fp,"m_horizontal , m_vertical , elementlength:\n");
	fprintf(fp,"NBOA:\n");
	for (i = 0 ; i < 13 ; i++){
		fprintf(fp,"%f , %f , %f\n",mValues6horizontalS[i],mValues6verticalS[i],elementLength6S[i]);
	}

	fprintf(fp,"\nCurved section:\n");
	fprintf(fp,"(%f,%f) , %f , %f\n",3.000000,3.500000,2.500000,18.0);
	
	fprintf(fp,"\nExpanding ellipse:\n");
	for (i = 0 ; i < 51 ; i++){
		fprintf(fp,"%f , %f , %f\n",mValues3horizontalS[i],mValues3verticalS[i],elementLength3S[i]);
	}
	
	fprintf(fp,"\nLong Straight Section\n");
	fprintf(fp,"%f , %f , %f\n",1.500000,1.000000,90.0);

	fprintf(fp,"\nFocusing Ellipse\n");
	for (i = 0 ; i < 41 ; i++){
		fprintf(fp,"%f , %f , %f\n", mValues1horizontal_part_1[i], mValues1vertical_part_1[i],elementLength1_part_1[i]);
	}
	fprintf(fp,"2 cm gap for divJaw 3\n");
	for (i = 0 ; i < 3 ; i++){
		fprintf(fp,"%f , %f , %f\n", mValues1horizontal_part_2[i], mValues1vertical_part_2[i],elementLength1_part_2[i]);
	}
	fprintf(fp,"2 cm gap for divJaw 2\n");
	for (i = 0 ; i < 2 ; i++){
		fprintf(fp,"%f , %f , %f\n", mValues1horizontal_part_3[i], mValues1vertical_part_3[i],elementLength1_part_3[i]);
	}
fprintf(fp,"2 cm gap for divJaw 1 \n");
	for (i = 0 ; i < 3 ; i++){
		fprintf(fp,"%f , %f , %f\n", mValues1horizontal_part_4[i], mValues1vertical_part_4[i],elementLength1_part_4[i]);
	}


fclose(fp);
}


printf("\n part 3 length: %f\n",DivSlit2Pos-DivSlit1Gap/2.0-DivSlit2Gap/2.0-DivSlit1Pos);
printf("\n part 4 length: %f\n",DivSlit1Pos-DivSlit1Gap/2.0-sample_dist);

  lambdamin=Lmin; 
  lambdamax=Lmax;
  XW=1.05*(WidthC+2*WidthT);
  YH=1.05*Yheight;
  sprintf(options1,"user1 bins=201 limits=[-%g,%g]",XW/2,XW/2);
  sprintf(options4,"user1 bins=201 limits=[-%g,%g]",YH/2,YH/2);
  sprintf(options2,"user1 bins=201 limits=[-%g,%g], user2 bins=201 limits=[-%g,%g]",XW/2,XW/2,YH/2,YH/2);
  sprintf(options3,"user1 bins=201 limits=[-%g,%g], user2 bins=201 limits=[-%g,%g]",1.05*(WidthC/2),1.05*(WidthC/2),1.05*Yheight/2,1.05*Yheight/2);
  sprintf(srcdef,"2015");
  if (beamline==1) {
    TCollmin=0;
    TCollmax=0.058;
  } else if (beamline==2) {
    TCollmin=0;
    TCollmax=0.06;
  }
  else {
    TCollmin=0.011;
    TCollmax=0.071;
  }
  if (strcasestr(sector,"N")) {
    iBeamlines=iBeamlinesN;
    DeltaX=-0.0585; DeltaZ=0.0925;
  } else if (strcasestr(sector,"W")) {
    iBeamlines=iBeamlinesW;
    DeltaX=0.0585; DeltaZ=0.0925;
  } else if (strcasestr(sector,"S")) {
    iBeamlines=iBeamlinesS;
    DeltaX=0.0585; DeltaZ=-0.0925;
  } else if (strcasestr(sector,"E")) {
    iBeamlines=iBeamlinesE;
    DeltaX=-0.0585; DeltaZ=-0.0925;
  }
  ANGLE=iBeamlines[beamline-1]-90;
  if (filter==0)
    sprintf(MCPLfile,"%s%i.mcpl.gz",sector,beamline);
  else
    sprintf(MCPLfile,"%s%i_filtered.mcpl.gz",sector,beamline);
  printf("MCPLfile is %s\n",MCPLfile);
%}

TRACE

COMPONENT Origin = Progress_bar()
AT (0, 0, 0) ABSOLUTE

/* read neutrons from an mcpl file*/

COMPONENT vinROT2 = Arm()
AT(0,0,0) RELATIVE PREVIOUS
  ROTATED (0,-90,0) RELATIVE PREVIOUS

COMPONENT vinROT1 = Arm()
AT(0,0,0) RELATIVE PREVIOUS
  ROTATED (-90,0,0) RELATIVE PREVIOUS

  /*COMPONENT vin = MCPL_input(filename=MCPLfile,verbose=1,repeat_count=repeat,E_smear=E_smear,pos_smear=pos_smear,dir_smear=dir_smear)
WHEN (MCPL) AT(0,0,0) RELATIVE PREVIOUS
EXTEND %{
  if (mcipMCPL){
    if(p>mcipthres) {ABSORB;}
    else {SCATTER;}
    p*=1.56e16;
    p/=1e5;
    z=z-0.137;
  }
%}
  */
COMPONENT Sphere1 = PSD_monitor_4PI(filename="nonrotated", radius=2.2,restore_neutron=1)
AT (0,0,0) RELATIVE PREVIOUS

/* Focusing for this use of the source is a little unphysical: 1x1cm @ 1m ~ 1e-4 steradian. To be useful in a "proper" instrument, you should of course illuminate your beamport fully!*/
COMPONENT Source = ESS_butterfly(sector=sector,beamline=beamline,Lmin=Lmin,Lmax=Lmax,c_performance=c_performance,t_performance=t_performance,dist=dist,target_index=index,cold_frac=cold, yheight=Yheight,
				   focus_xw=0.12, focus_yh=0.12)
  WHEN (!MCPL) AT (DeltaX,0,DeltaZ) ABSOLUTE
  ROTATED (0, ANGLE, 0) ABSOLUTE

COMPONENT Sphere0 = PSD_monitor_4PI(filename="rotated", radius=2.2,restore_neutron=1)
AT (0,0,0) RELATIVE Source

COMPONENT Focus_cut=Shape(xwidth=0.01,yheight=0.01)
  AT(0,0,2) RELATIVE Source
EXTEND %{
  double xtmp,ytmp,ztmp,vxtmp,vytmp,vztmp;
  xtmp=x;ytmp=y;ztmp=z;
  vxtmp=vx;vytmp=vy;vztmp=vz;
  ALLOW_BACKPROP;
  PROP_Z0;
  SCATTER;
  
  if (fabs(x)>0.06 || fabs(y)>0.06) {
    ABSORB;
  } else {
    x=xtmp;y=ytmp;z=ztmp;
    vx=vxtmp;vy=vytmp;vz=vztmp;
  }
%}

COMPONENT BackTrace = Shape(xwidth=0.3,yheight=0.3)
  AT (0,0,0.08) RELATIVE Source
EXTEND %{
  /* Propagate back to a small rectangle in front of moderators */

  ALLOW_BACKPROP;
  PROP_Z0;
  SCATTER;
  
  /* Remove neutrons that are not from around the moderators */
  if (fabs(x)>0.12 || fabs(y)>0.03) {
   ABSORB;
  }
  double myL = (2*PI/V2K)/sqrt(vx*vx + vy*vy + vz*vz);
  if (myL<mcipLmin || myL>mcipLmax) {
    ABSORB;
  }
  t+=rand01()*ESS_SOURCE_DURATION;
  if (t>3*ESS_SOURCE_DURATION) {
    ABSORB;
  }
  /* Measure location and energy for later use */
  SrcX=x;SrcY=y;SrcZ=z;
  Eneutron=VS2E*(vx*vx + vy*vy + vz*vz);
  if (Eneutron>EminTh) {
    Emin=EminC;Emax=EmaxC;
    IsCold=0;
  } else {
    Emin=EminTh;Emax=EmaxTh;
    IsCold=1;
  }
  T0=t;
  L0=myL;
%}


/* These arms are just to ensure we get a good view of the monolith */
COMPONENT Arm1 = Arm()
  AT (0,0,2) RELATIVE Source

COMPONENT Arm2 = Arm()
  AT (0,0,3.5) RELATIVE Source



COMPONENT AutoTOFL0 = Monitor_nD(xwidth=XW, yheight=YH, user1=T0, user2=L0, options="user1 limits=[0 5e-3] bins=51, user2 limits=[0.1 20] bins=41", restore_neutron=1)
 AT (0, 0, 0.001) RELATIVE BackTrace

COMPONENT AutoTOF0 = Monitor_nD(xwidth=XW, yheight=YH, user1=T0, options="user1 limits=[0 5e-3] bins=51", restore_neutron=1)
 AT (0, 0, 0.001) RELATIVE PREVIOUS

  COMPONENT AutoL0 = Monitor_nD(xwidth=XW, yheight=YH, user1=L0, options="user1 limits=[0.1 20] bins=41", restore_neutron=1)
 AT (0, 0, 0.001) RELATIVE PREVIOUS

  COMPONENT PSD0= Monitor_nD(filename="flat",xwidth=0.2,yheight=0.2,user1=SrcX,user2=SrcY,options="user1 limits=[-0.1 0.1] bins=90, user2 limits=[-0.1 0.1] bins=90,", restore_neutron=1)
  AT (0,0,0.001) RELATIVE PREVIOUS

  COMPONENT PSD1=Monitor_nD(filename="flatC",xwidth=0.2,yheight=0.2,user1=SrcX,user2=SrcY,options="user1 limits=[-0.1 0.1] bins=90, user2 limits=[-0.1 0.1] bins=90,", restore_neutron=1)
WHEN (Eneutron<EminTh) AT (0,0,0.001) RELATIVE PREVIOUS

  COMPONENT PSD2=Monitor_nD(filename="flatT",xwidth=0.16,yheight=0.16,user1=SrcX,user2=SrcY,options="user1 limits=[-0.1 0.1] bins=90, user2 limits=[-0.1 0.1] bins=90,", restore_neutron=1)
WHEN (Eneutron>=EminTh) AT (0,0,0.001) RELATIVE PREVIOUS


/* Measures the horizontal emmision coordinate of all neutrons - gives the "apparent width" of the moderators as seen from the beamline */
COMPONENT MonND1 = Monitor_nD(xwidth=XW, yheight=YH, user1=SrcX, username1="Horizontal position / [m]", options=options1, restore_neutron=1)
AT (0, 0, 1) RELATIVE Source

/* Measures the horizontal emmision coordinate of all neutrons - gives the "apparent width" of the moderators as seen from the beamline */
COMPONENT CWidth = Monitor_nD(xwidth=XW, yheight=YH, user1=SrcX, username1="Horizontal position / [m]", options=options1, restore_neutron=1)
  WHEN(Eneutron<=EmaxC && Eneutron>=EminC) AT (0, 0, 1) RELATIVE Source

/* Measures the horizontal emmision coordinate of all neutrons - gives the "apparent width" of the moderators as seen from the beamline */
COMPONENT TWidth = Monitor_nD(xwidth=XW, yheight=YH, user1=SrcX, username1="Horizontal position / [m]", options=options1, restore_neutron=1)
  WHEN(Eneutron<=EmaxTh && Eneutron>=EminTh) AT (0, 0, 1) RELATIVE Source

/* Measures the vertical emmision coordinate of cold neutrons */
COMPONENT MonND2 = Monitor_nD(xwidth=XW, yheight=YH, user1=SrcY, username1="Vertical position COLD / [m]", options=options4, restore_neutron=1)
  WHEN(IsCold) AT (0, 0, 1) RELATIVE Source

/* Measures the vertical emmision coordinate of thermal neutrons */
COMPONENT MonND2_2 = Monitor_nD(xwidth=XW, yheight=YH, user1=SrcY, username1="Vertical position THERMAL/ [m]", options=options4, restore_neutron=1)
  WHEN(!IsCold) AT (0, 0, 1) RELATIVE Source

/* 2D-plot of emmision coordinates for all neutrons */
COMPONENT MonND3 = Monitor_nD(xwidth=XW, yheight=YH, user1=SrcX, username1="Horizontal position / [m]", user2=SrcY,username2="Vertical position / [m]", options=options2, restore_neutron=1)
 AT (0, 0, 1) RELATIVE Source

/* 2D-plot of (x,z) emmision coordinates for all neutrons */
COMPONENT MonND4 = Monitor_nD(xwidth=XW, yheight=YH, user1=SrcX, username1="Emission position / [m]", user2=SrcZ, username2="Z-component of position / [m]", options="user1 bins=201 limits=[-0.3,0.3], user2 bins=201 limits=[-0.3,0.3]", restore_neutron=1)
 AT (0, 0, 1) RELATIVE Source
  EXTEND %{
    //printf("Time is %g\n",t);
%}



COMPONENT AutoTOFL = Monitor_nD(xwidth=0.1, yheight=0.1, options="tof limits=[0 15e-3] bins=51, lambda limits=[0.1 20] bins=41", restore_neutron=1)
 AT (0, 0, 2) RELATIVE Source



/* Measures brilliance of the "full" cold source */
COMPONENT BrillmonCOLD = Brilliance_monitor(
    nlam = 101, nt = 101, filename = "brillCOLD", t_0 = -1000,
    t_1 =4e4, lambda_0 = lambdamin, lambda_1 = lambdamax,
    Freq =14, toflambda=1 ,tofcuts=0, srcarea=(100*0.072*100*Yheight), restore_neutron=1,source_dist=2,xwidth=0.1,yheight=0.1)
WHEN(IsCold)  AT (0, 0, 2) RELATIVE Source

/* Measures "collimated" brilliance of the cold source over fixed 6 cm wide area x central part vertically. */
/* Used for calibration of performance wrt. MCNP BF1 output, see http://ess_butterfly.mcstas.org */
COMPONENT BrillmonCOLD_COLL = Brilliance_monitor(
    nlam = 101, nt = 101, filename = "brillCOLD_COLL", t_0 = 0,
    t_1 = 4e4, lambda_0 = lambdamin, lambda_1 = lambdamax,
    Freq =14, toflambda=1,tofcuts=0, srcarea=(100*0.06*100*2*Yheight/2.5), restore_neutron=1,source_dist=2,xwidth=0.1,yheight=0.1)
  WHEN(fabs(SrcY)<Yheight/2.5 && SrcX < (0.071+delta) && SrcX > (0.011+delta))  AT (0, 0, 2) RELATIVE Source

/* Measures brilliance of the "full" thermal source */
COMPONENT BrillmonTHRM = Brilliance_monitor(
    nlam = 101, nt = 101, filename = "brillTHRM", t_0 = -1000,
    t_1 =4e4, lambda_0 = lambdamin, lambda_1 = lambdamax,
    Freq =14, toflambda=1,tofcuts=0, srcarea=(100*0.108*100*Yheight), restore_neutron=1,source_dist=2,xwidth=0.1,yheight=0.1)
  WHEN (!IsCold) AT (0, 0, 2) RELATIVE Source

/* Measures "collimated" brilliance of the thermal source over fixed 6 cm wide area (or smaller at beamlines no. 1,2) x central part vertically. */
/* Used for calibration of performance wrt. MCNP BF1 output, see http://ess_butterfly.mcstas.org */
COMPONENT BrillmonTHRM_COLL = Brilliance_monitor(
    nlam = 101, nt = 101, filename = "brillTHRM_COLL", t_0 = -1000,
    t_1 =4e4, lambda_0 = lambdamin, lambda_1 = lambdamax,
      Freq =14, toflambda=1,tofcuts=0, srcarea=(100*0.06*100*2*Yheight/2.5), restore_neutron=1,source_dist=2,xwidth=0.1,yheight=0.1)
  WHEN (fabs(SrcY)<Yheight/2.5 && -SrcX>(TCollmin+delta) && -SrcX<(TCollmax+delta))  AT (0, 0, 2) RELATIVE Source

  COMPONENT PSD0x= Monitor_nD(filename="flat_x",xwidth=0.1,yheight=0.1,user1=SrcX,user2=SrcY,options="user1 limits=[-0.08 0.08] bins=90, user2 limits=[-0.08 0.08] bins=90,", restore_neutron=1)
  AT (0,0,0.001) RELATIVE PREVIOUS

  COMPONENT PSD1x=Monitor_nD(filename="flatC_x",xwidth=0.1,yheight=0.1,user1=SrcX,user2=SrcY,options="user1 limits=[-0.08 0.08] bins=90, user2 limits=[-0.08 0.08] bins=90,", restore_neutron=1)
WHEN (Eneutron<EminTh) AT (0,0,0.001) RELATIVE PREVIOUS

  COMPONENT PSD2x=Monitor_nD(filename="flatT_x",xwidth=0.1,yheight=0.1,user1=SrcX,user2=SrcY,options="user1 limits=[-0.08 0.08] bins=90, user2 limits=[-0.08 0.08] bins=90,", restore_neutron=1)
WHEN (Eneutron>=EminTh) AT (0,0,0.001) RELATIVE PREVIOUS


COMPONENT StartOfGuide = Arm()
AT (0.01277,0.000000,1.903398-u) RELATIVE Source
ROTATED (0,-0.56,0) RELATIVE Source 

COMPONENT NBOA= Elliptic_guide_gravity(
l=4.39553, linxw=3.4578, linyh=1.36, loutxw=0.415155, loutyh=3.487681,
xwidth = 0.069634, yheight = 0.04862, dimensionsAt="mid",
R0=0.990000, Qc=0.021700, alpha=3.100000, mvaluesright = mValues6horizontalS, mvaluesleft = mValues6horizontalS,mvaluestop = mValues6verticalS,mvaluesbottom = mValues6verticalS,seglength = elementLength6S, W=0.003000)
AT (0,0,u) RELATIVE StartOfGuide


COMPONENT EndOfelement_6= Arm()
AT (0,0,4.39553+2*u) RELATIVE PREVIOUS




COMPONENT L_monBeforePSC1 = L_monitor(
    nL = 100, filename = "L_monBeforePSC1.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, Lmin = lambda_1/2, Lmax = lambda_0*2)
  AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT ToFBeforerPSC1 = TOF_monitor(
    nt = 1000, filename = "ToFBeforePSC1.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, tmax = 2e4)
  AT (0, 0, u) RELATIVE  PREVIOUS

COMPONENT PSD_beforePulseShapping1 = PSD_monitor(
    nx = 100, ny = 100, filename = "PSD_beforePSC1.dat",restore_neutron=1,
    xwidth = 0.2, yheight = 0.2)
  AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT TofLambdaBeforePSC = TOFLambda_monitor(
    nL = 100, nt = 100, tmin =0, tmax = 2e4,
    filename = "TofLambdaBeforePSC1.dat", xwidth = sampleSizeY,restore_neutron=1,
    yheight = sampleSizeY, Lmin = lambda_0*0.5, Lmax = lambda_1*2)
  AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT PulseShapingChopper = DiskChopper(   /************** Pulse shaping chopper 1 ****************/
    theta_0 = 170.0, radius = 0.35, nu =14.0*chopPulseFrequencyOrder, nslit = 1, yheight=0.052,
  phase= chopPulsePhaseOffset-0)
  WHEN (CHOPPERS)  AT (0, 0, PscOff) RELATIVE PREVIOUS

COMPONENT PSD_AfterPulseShapping1 = PSD_monitor(
    nx = 100, ny = 100, filename = "PSD_AfterPSC1.dat",restore_neutron=1,
    xwidth = 0.2, yheight = 0.2)
  AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT ToFInsidePSC = TOF_monitor(
    nt = 1000, filename = "ToFInsidePSC.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, tmax = 2e4)
  AT (0, 0,u) RELATIVE  PREVIOUS

COMPONENT PulseShapingChopper2 = DiskChopper(   /************** Pulse shaping chopper 2 ****************/
    theta_0 = 170.0, radius = 0.35, nu =14.0*chopPulseFrequencyOrder, nslit = 1, yheight=0.052,
  phase= chopPulse2PhaseOffset+0)
  WHEN (CHOPPERS)   AT (0, 0, discD) RELATIVE PREVIOUS

COMPONENT TofLambdaAfterPSC2 = TOFLambda_monitor(
    nL = 100, nt = 100, tmin = 0, tmax = 2e4,
    filename = "TofLambdaAfterPSC2.dat", xwidth = sampleSizeY,restore_neutron=1,
    yheight = sampleSizeY, Lmin = lambda_0*0.5, Lmax = lambda_1*2)
  AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT PSD_AfterPSC2 = PSD_monitor(
    nx = 100, ny = 100, filename = "PSD_AfterPSC2.dat",restore_neutron=1,
    xwidth = 0.2, yheight = 0.2)
  AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT ToFAfterPSC2 = TOF_monitor(
    nt = 1000, filename = "ToFAfterPSC2.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, tmax = 2e4)
  AT (0, 0,u) RELATIVE  PREVIOUS

COMPONENT L_monAfterPSC2 = L_monitor(
    nL = 100, filename = "L_monAfterPSC2.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, Lmin = lambda_1/2, Lmax = lambda_0*2)
  AT (0, 0, u) RELATIVE PREVIOUS





COMPONENT EndOfelement_5= Arm()
AT (0,0,0.081707 ) RELATIVE EndOfelement_6


// // BENDER // //
// The folowing guide is the 18 meter long bender. 
// In this file it is made by 36 straight sections of each 0.5 meters, rotated [benderAngle] deg each, corresponding to a radius of curvature of ~1519 meters.
// In this section there are two choppers, FOC1 and FOC2.

COMPONENT curved_guide_1_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (0,0,u) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_2_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_3_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS


COMPONENT curved_guide_4_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS


// This section contains first FOC chopper //
// The chopper is placed 2.15 meters after the start of the curved section, corresponding to 6.6265 meters after guide start. 
// The gap arround the chopper is 4 cm

COMPONENT curved_guide_5_beforeChopper = Guide_gravity(
  l=0.13,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS


COMPONENT L_monBeforeFOC1 = L_monitor(
    nL = 100, filename = "L_monBeforeFOC1.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, Lmin = lambda_0/2.0, Lmax = lambda_1*2.0)
  AT (0, 0, 0.13+u) RELATIVE PREVIOUS
ROTATED (0, 0, 0) RELATIVE PREVIOUS

COMPONENT ToFBeforeFOC1 = TOF_monitor(
    nt = 1000, filename = "ToFBeforeFOC1.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, tmax = 2e4)
  AT (0, 0, u) RELATIVE  PREVIOUS

COMPONENT PSD_beforeFOC1 = PSD_monitor(
    nx = 100, ny = 100, filename = "PSD_beforeFOC1.dat",restore_neutron=1,
    xwidth = 0.2, yheight = 0.2)
  AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT FOC1 = DiskChopper(   /****************************  Pulse removing chopper 1  ************************/
    theta_0 =FOCopen1 , radius = 0.35, nu =14, nslit = 1, yheight=0.052,
   phase=chopFrameOverlap1PhaseOffset)
  WHEN (CHOPPERS)  AT (0, 0,0.02) RELATIVE PREVIOUS
ROTATED (0,0,0) RELATIVE PREVIOUS

COMPONENT PSD_afterFOC1 = PSD_monitor(
    nx = 100, ny = 100, filename = "PSD_afterFOC1.dat",restore_neutron=1,
    xwidth = 0.2, yheight = 0.2)
  AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT ToFAfterFOC1 = TOF_monitor(
    nt = 1000, filename = "ToFAfterFOC1.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, tmax = 2e4)
  AT (0, 0, u) RELATIVE  PREVIOUS

COMPONENT L_monAfterFOC1 = L_monitor(
    nL = 100, filename = "L_monAfterFOC1.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, Lmin = lambda_0/2.0, Lmax = lambda_1*2.0)
  AT (0, 0, u) RELATIVE PREVIOUS


COMPONENT curved_guide_5_afterChopper = Guide_gravity(
  l=0.33,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (0,0,0.17) RELATIVE curved_guide_5_beforeChopper
ROTATED (0,0,0) RELATIVE curved_guide_5_beforeChopper

COMPONENT curved_guide_6_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1= 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.33+u) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_7_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_8_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1  = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_9_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_10_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_11_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_12_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_13_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_14_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_15_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_16_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS

COMPONENT curved_guide_17_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS


// This section contains second FOC chopper // (might be named PR... fix this)
// The chopper is placed 8.59 meters after the start of the curved section, corresponding to 13.0695 meters after guide start. 
// The gap arround the chopper is 4 cm

COMPONENT curved_guide_18_beforeChopper = Guide_gravity(
  l=0.07,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_17_1
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_17_1


COMPONENT L_monBeforeFOC2 = L_monitor(
    nL = 100, filename = "L_monBeforeFOC2.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, Lmin = lambda_0/2.0, Lmax = lambda_1*2.0)
  AT (0,0, 0.07+u) RELATIVE PREVIOUS
ROTATED (0, 0, 0) RELATIVE PREVIOUS

COMPONENT ToFBeforeFOC2 = TOF_monitor(
    nt = 1000, filename = "ToFBeforeFOC2.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, tmax = 2e4)
  AT (0, 0, u) RELATIVE  PREVIOUS

COMPONENT PSD_beforeFOC2 = PSD_monitor(
    nx = 100, ny = 100, filename = "PSD_beforeFOC2.dat",restore_neutron=1,
    xwidth = 0.2, yheight = 0.2)
  AT (0, 0, u) RELATIVE PREVIOUS
  
COMPONENT FOC2 = DiskChopper(        /************** Pulse removing chopper 2 ****************/
    theta_0 =FOCopen2 , radius = 0.35, nu =14, nslit = 1, yheight=0.052,
   phase=chopFrameOverlap2PhaseOffset)
  WHEN (CHOPPERS)  AT (0,0, 0.02) RELATIVE PREVIOUS
ROTATED (0,0,u) RELATIVE PREVIOUS

COMPONENT PSD_afterFOC2 = PSD_monitor(
    nx = 100, ny = 100, filename = "PSD_afterFOC2.dat",restore_neutron=1,
    xwidth = 0.2, yheight = 0.2)
  AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT ToFAfterFOC2 = TOF_monitor(
    nt = 1000, filename = "ToFAfterFOC2.dat",restore_neutron=1, xwidth = 0.2,
    yheight = 0.2, tmax = 2e4)
  AT (0, 0, u) RELATIVE  PREVIOUS

COMPONENT L_monAfterFOC2 = L_monitor(
    nL = 100, filename = "L_monAfterFOC2.dat",restore_neutron=1, xwidth = 0.2,
    yheight = 0.2, Lmin = lambda_0/2.0, Lmax = lambda_1*2.0)
  AT (0, 0, u) RELATIVE PREVIOUS


COMPONENT curved_guide_18_afterChopper = Guide_gravity(
  l=0.39,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (0,0,0.11) RELATIVE curved_guide_18_beforeChopper // curved_guide_17_1
ROTATED (0,0,0) RELATIVE curved_guide_18_beforeChopper // curved_guide_17_1

COMPONENT curved_guide_19_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.39+u) RELATIVE PREVIOUS // curved_guide_18_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_18_0

COMPONENT curved_guide_20_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_19_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_19_0

COMPONENT curved_guide_21_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_20_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_20_0

COMPONENT curved_guide_22_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_21_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_21_0

COMPONENT curved_guide_23_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_22_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_22_0

COMPONENT curved_guide_24_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_23_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_23_0

COMPONENT curved_guide_25_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_24_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_24_0

COMPONENT curved_guide_26_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_25_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_25_0

COMPONENT curved_guide_27_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_26_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_26_0

COMPONENT curved_guide_28_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_27_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_27_0

COMPONENT curved_guide_29_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_28_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_28_0

COMPONENT curved_guide_30_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_29_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_29_0

COMPONENT curved_guide_31_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_30_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_30_0

COMPONENT curved_guide_32_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_31_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_31_0

COMPONENT curved_guide_33_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_32_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_32_0

COMPONENT curved_guide_34_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_33_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_33_0

COMPONENT curved_guide_35_0 = Guide_gravity(
  l=0.5,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_34_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_34_0


COMPONENT curved_guide_36_0 = Guide_gravity(
  l=0.495689131828,G=-9.82,
  w1 = 0.029534, w2 = 0.029534,
  h1 = 0.047514, h2 = 0.047514,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 3.000000, mright = 3.500000,
  mtop = 2.500000,mbottom =2.500000)
AT (7.57345916228e-10,0,0.500 + u + 6e-5) RELATIVE PREVIOUS // curved_guide_34_0
ROTATED (0,benderAngle,0) RELATIVE PREVIOUS // curved_guide_34_0



COMPONENT EndOfelement_4= Arm()
AT (7.57345916228e-10,0,0.495689132 + u) RELATIVE PREVIOUS // curved_guide_35_0



COMPONENT elliptical_guide_gravity3= Elliptic_guide_gravity(
l=24.928800, linxw=3.709727, linyh=4.423828, loutxw=28.638527, loutyh=29.352628,
xwidth = 0.060000, yheight = 0.090000, dimensionsAt="mid",
R0=0.990000, Qc=0.021700, alpha=3.100000, mvaluesright = mValues3horizontalS, mvaluesleft = mValues3horizontalS,mvaluestop = mValues3verticalS,mvaluesbottom = mValues3verticalS,seglength = elementLength3S, W=0.003000)
AT (0,0, u) RELATIVE EndOfelement_4
ROTATED (0,0,0) RELATIVE EndOfelement_4

COMPONENT EndOfelement_3= Arm()
AT (0,0,24.928800+u) RELATIVE PREVIOUS




/*********************** LONG STRAIGHT SECTION **************************/

COMPONENT straight_guide_2_1= Guide_gravity(l=chopBWPos-startXposition_straight-BW_chopGap/2,G=-9.82,
  w1 = 0.060000, w2 = 0.060000,
  h1 = 0.090000, h2 = 0.090000,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 1.500000, mright = 1.500000,
  mtop = 1.000000,mbottom =1.000000)
AT (0,0, u) RELATIVE PREVIOUS
ROTATED (0,0,0) RELATIVE PREVIOUS


COMPONENT L_monBeforeBWC = L_monitor(
    nL = 100, filename = "L_monBeforeBWC.dat", xwidth = 0.2,restore_neutron=1,
    yheight = 0.2, Lmin = lambda_0/2.0, Lmax = lambda_1*2.0)
  AT (0, 0, chopBWPos-startXposition_straight-BW_chopGap/2+u) RELATIVE PREVIOUS

COMPONENT ToFBeforeBWC = TOF_monitor(
    nt = 1000, filename = "ToFBeforeBWC.dat",restore_neutron=1, xwidth = 0.2,
    yheight = 0.2, tmax = 5.5*72.0*1e6/v_0)
  AT (0, 0, u) RELATIVE  PREVIOUS

COMPONENT BWC1 = DiskChopper(  /************** Bandwidth chopper 1 ****************/
    theta_0 = BWopen, radius = 0.35, nu =14, nslit = 1, yheight=0.086,
   delay=chopBWOffset)
   //phase=chopBWPhaseOffset)
  WHEN (CHOPPERS)   AT (0, 0, BW_chopGap/2+u) RELATIVE PREVIOUS

  COMPONENT BWC2 = DiskChopper(  /************** Bandwidth chopper 2 ****************/
    theta_0 = BWopen, radius = 0.35, nu =-14, nslit = 1, yheight=0.086,
   delay=chopBWOffset)
   //phase=chopBWPhaseOffset)
   WHEN (CHOPPERS)   AT (0, 0, u) RELATIVE  PREVIOUS
   
COMPONENT ToFAfterBWC = TOF_monitor(
    nt = 1000, filename = "ToFAfterBWC.dat",restore_neutron=1, xwidth = 0.2,
    yheight = 0.2, tmax =  5.5*72.0*1.0e6/v_0)
  AT (0, 0, u) RELATIVE  PREVIOUS

COMPONENT L_monAfterBWC = L_monitor(
    nL = 100, filename = "L_monAfterBWC.dat", restore_neutron=1,xwidth = 0.2,
    yheight = 0.2, Lmin = lambda_0/2.0, Lmax = lambda_1*2.0)
  AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT straight_guide_2_2= Guide_gravity(l=length2-chopBWPos+startXposition_straight-BW_chopGap/2,G=-9.82,
  w1 = 0.060000, w2 = 0.060000,
  h1 = 0.090000, h2 = 0.090000,
  R0=0.990000,Qc=0.021700,
  alpha=3.100000,W=0.003000,
  mleft = 1.500000, mright = 1.500000,
  mtop = 1.000000,mbottom =1.000000)
AT (0,0, BW_chopGap/2) RELATIVE PREVIOUS
ROTATED (0,0,0) RELATIVE PREVIOUS


COMPONENT EndOfelement_2= Arm()
AT (0,0,length2-chopBWPos+startXposition_straight-BW_chopGap/2 + u) RELATIVE straight_guide_2_2




/*********************** LAST FOCUSING SECTION **************************/

COMPONENT elliptical_guide_gravity1_1= Elliptic_guide_gravity(
l=length1-DivSlit3Pos-DivSlit3Gap/2.0+sample_dist, linxw=Linx1, 
linyh=Liny1, loutxw=Loutx1+DivSlit3Pos+DivSlit3Gap/2.0-sample_dist, 
loutyh=Louty1+DivSlit3Pos+DivSlit3Gap/2.0-sample_dist,
xwidth = 2*smallaxis_x1, yheight = 2*smallaxis_y1, dimensionsAt="mid",
R0=0.990000, Qc=0.021700, alpha=3.100000, mvaluesright = mValues1horizontal_part_1, mvaluesleft = mValues1horizontal_part_1,mvaluestop = mValues1vertical_part_1,mvaluesbottom = mValues1vertical_part_1,seglength = elementLength1_part_1, W=0.003000)
AT (0,0, u) RELATIVE EndOfelement_2
ROTATED (0,0,0) RELATIVE PREVIOUS

COMPONENT DiwJaw3 = Slit(
    yheight =1, xwidth= DivSlit3_width)
AT (0,0, 2*u+length1-(DivSlit3Pos-sample_dist)) RELATIVE EndOfelement_2

COMPONENT elliptical_guide_gravity1_2= Elliptic_guide_gravity(
l=DivSlit3Pos-DivSlit2Gap/2.0-DivSlit3Gap/2.0-DivSlit2Pos, linxw=Linx1+length1-(DivSlit3Pos-DivSlit3Gap/2.0-sample_dist), 
linyh=Liny1+length1-(DivSlit3Pos-DivSlit3Gap/2.0-sample_dist), loutxw=Loutx1+DivSlit2Pos+DivSlit2Gap/2.0-sample_dist, 
loutyh=Louty1+DivSlit2Pos+DivSlit2Gap/2.0-sample_dist,
xwidth = 2*smallaxis_x1, yheight = 2*smallaxis_y1, dimensionsAt="mid",
R0=0.990000, Qc=0.021700, alpha=3.100000, mvaluesright = mValues1horizontal_part_2, mvaluesleft = mValues1horizontal_part_2,mvaluestop = mValues1vertical_part_2,mvaluesbottom = mValues1vertical_part_2,seglength = elementLength1_part_2, W=0.003000)
AT (0,0, 3*u+length1-(DivSlit3Pos-DivSlit3Gap/2.0-sample_dist)) RELATIVE EndOfelement_2
ROTATED (0,0,0) RELATIVE PREVIOUS

COMPONENT DiwJaw2 = Slit(
    yheight = 1, xwidth=DivSlit2_width)
AT (0,0, u+length1-(DivSlit2Pos-sample_dist))  RELATIVE EndOfelement_2

COMPONENT elliptical_guide_gravity1_3= Elliptic_guide_gravity(
l=DivSlit2Pos-DivSlit1Gap/2.0-DivSlit2Gap/2.0-DivSlit1Pos, linxw=Linx1+length1-(DivSlit2Pos-DivSlit2Gap/2.0-sample_dist), 
linyh=Liny1+length1-(DivSlit2Pos-DivSlit2Gap/2.0-sample_dist), loutxw=Loutx1+DivSlit1Pos+DivSlit1Gap/2.0-sample_dist, 
loutyh=Louty1+DivSlit1Pos+DivSlit1Gap/2.0-sample_dist,
xwidth = 2*smallaxis_x1, yheight = 2*smallaxis_y1, dimensionsAt="mid",
R0=0.990000, Qc=0.021700, alpha=3.100000, mvaluesright = mValues1horizontal_part_3, mvaluesleft = mValues1horizontal_part_3,mvaluestop = mValues1vertical_part_3,mvaluesbottom = mValues1vertical_part_3,seglength = elementLength1_part_3, W=0.003000)
AT (0,0, 4*u+length1-(DivSlit2Pos-DivSlit2Gap/2.0-sample_dist)) RELATIVE EndOfelement_2
ROTATED (0,0,0) RELATIVE PREVIOUS

COMPONENT DiwJaw1 = Slit(
    yheight =1, xwidth= DivSlit1_width)
AT (0,0, 5*u+length1-(DivSlit1Pos-sample_dist)) RELATIVE EndOfelement_2

COMPONENT elliptical_guide_gravity1_4= Elliptic_guide_gravity(
l=DivSlit1Pos-DivSlit1Gap/2.0-sample_dist, linxw=Linx1+length1-(DivSlit1Pos-DivSlit1Gap/2.0-sample_dist), 
linyh=Liny1+length1-(DivSlit1Pos-DivSlit1Gap/2.0-sample_dist), loutxw=Loutx1, loutyh=Louty1,
xwidth = 2*smallaxis_x1, yheight = 2*smallaxis_y1, dimensionsAt="mid",
R0=0.990000, Qc=0.021700, alpha=3.100000, mvaluesright = mValues1horizontal_part_4, mvaluesleft = mValues1horizontal_part_4,mvaluestop = mValues1vertical_part_4,mvaluesbottom = mValues1vertical_part_4,seglength = elementLength1_part_4, W=0.003000)
AT (0,0, 6*u+length1-(DivSlit1Pos-DivSlit1Gap/2.0-sample_dist)) RELATIVE EndOfelement_2
ROTATED (0,0,0) RELATIVE PREVIOUS

COMPONENT EndOfelement_1= Arm()
AT (0,0,DivSlit1Pos-DivSlit1Gap/2.0-sample_dist +u) RELATIVE PREVIOUS

COMPONENT VirtualOutput = Virtual_output(
    filename="VirtualOutput_endOfGuide.dat") WHEN (makeVirtualSource==1)
AT (0, 0,u) RELATIVE PREVIOUS


COMPONENT DiwJaw0 = Slit(
    yheight =1, xwidth=DivSlit0_width)
AT (0,0, 7*u+length1+DivSlit0Gap/2.0) RELATIVE EndOfelement_2



COMPONENT Lmon_guide_end = L_monitor(
   nL = 300, filename = "Lmon_guide_end", xwidth = 0.027704, restore_neutron=1,
   yheight = 0.027704, Lmin = 0.100000, Lmax = 8.000000)
  AT (0, 0,u) RELATIVE PREVIOUS

/*********************** SAMPLE POSITION **************************/

COMPONENT Div2d_sample_B = Divergence_monitor(
    nh = 200, nv = 200, filename = "Div2d_sample_B", xwidth = sampleSizeX,
    yheight = sampleSizeY, maxdiv_h = 0.750000, maxdiv_v = 0.750000,restore_neutron=1)
  AT (0, 0,0.580000) RELATIVE EndOfelement_1
  EXTEND
    %{
    x_div = RAD2DEG*atan2(vx,vz);
    y_div = RAD2DEG*atan2(vy,vz);
    if (SCATTERED) flag=1; else flag=0;
    %}

COMPONENT Div2d_sample = Divergence_monitor(
    nh = 200, nv = 200, filename = "Div2d_sample", xwidth = sampleSizeX, restore_neutron=1,
    yheight = sampleSizeY, maxdiv_h = 2.250000, maxdiv_v = 2.250000)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT PSD_sample = PSD_monitor(
    nx = 200, ny = 200, filename = "PSD_sample", restore_neutron=1,
    xwidth = 3*sampleSizeX, yheight = 3*sampleSizeY)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT HPSD_sample = PSDlin_monitor(
    nx = 100, filename="HPSD_sample",xwidth = 4*sampleSizeX, yheight = sampleSizeY, restore_neutron=1)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT VPSD_sample = PSDlin_y_monitor(
    ny = 100, filename="VPSD_sample",xwidth = sampleSizeX, yheight = 4*sampleSizeY, restore_neutron=1)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT Hdiv_sample = Hdiv_monitor(
    nh = 200, filename = "Hdiv_sample", xwidth = sampleSizeX,
    yheight = sampleSizeY, h_maxdiv = 2.250000, restore_neutron=1)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT Vdiv_sample = Vdiv_monitor(
    nv = 200, filename = "Vdiv_sample", xwidth = sampleSizeX, restore_neutron=1,
    yheight = sampleSizeY, v_maxdiv = 2.250000)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT acceptance_x_divx = DivPos_monitor(
   nh = 200, ndiv = 200, filename = "acceptance_x_divx",
   xwidth = 2*sampleSizeX, yheight = sampleSizeY, maxdiv_h = 1.500000, restore_neutron=1)
 AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT acceptance_y_divy = DivPos_y_monitor(
   npos = 200, ndiv = 200, filename = "acceptance_y_divy",
   xwidth = sampleSizeX, yheight = 2*sampleSizeY, maxdiv = 1.500000, restore_neutron=1)
 AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT Lmon_sample_B = L_monitor(
    nL = 300, filename = "Lmon_sample_B", xwidth = 0.010000, restore_neutron=1,
    yheight = 0.010000, Lmin = sampleSizeY, Lmax = 8.000000) WHEN flag
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT Div2d_sample_maxdiv = Divergence_monitor(
    nh = 200, nv = 200, filename = "Div2d_sample_maxdiv", xwidth = sampleSizeX, restore_neutron=1,
    yheight = sampleSizeY, maxdiv_h = 2.250000, maxdiv_v = 2.250000)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT PSD_sample_maxdiv = PSD_monitor(
    nx = 200, ny = 200, filename = "PSD_sample_maxdiv", restore_neutron=1,
    xwidth = 3*sampleSizeX, yheight = 3*sampleSizeY) WHEN (x_div<0.750000 && x_div>-0.750000 && y_div<0.750000 && y_div>-0.750000)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT HPSD_sample_maxdiv = PSDlin_monitor(
    nx = 100, filename="HPSD_sample_maxdiv",xwidth = 4*sampleSizeX, yheight = sampleSizeY, restore_neutron=1)
  WHEN (x_div<0.750000 && x_div>-0.750000 && y_div<0.750000 && y_div>-0.750000)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT VPSD_sample_maxdiv = PSDlin_y_monitor(
    ny = 100, filename="VPSD_sample_maxdiv",xwidth = sampleSizeX, yheight = 4*sampleSizeY, restore_neutron=1)
  WHEN (x_div<0.750000 && x_div>-0.750000 && y_div<0.750000 && y_div>-0.750000)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT Hdiv_sample_maxdiv = Hdiv_monitor(
    nh = 200, filename = "Hdiv_sample_maxdiv", xwidth = sampleSizeX, restore_neutron=1,
    yheight = sampleSizeY, h_maxdiv = 2.250000) WHEN (y_div<0.750000 && y_div>-0.750000)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT Vdiv_sample_maxdiv = Vdiv_monitor(
    nv = 200, filename = "Vdiv_sample_maxdiv", xwidth = sampleSizeX, restore_neutron=1,
    yheight = sampleSizeY, v_maxdiv = 2.250000) WHEN (x_div<0.750000 && x_div>-0.750000)
  AT (0, 0,u) RELATIVE PREVIOUS

COMPONENT acceptance_x_divx_maxdiv = DivPos_monitor(
   nh = 200, ndiv = 200, filename = "acceptance_x_divx_maxdiv", restore_neutron=1,
   xwidth = 2*sampleSizeX, yheight = sampleSizeY, maxdiv_h = 1.500000) WHEN (y_div<0.750000 && y_div>-0.750000)
 AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT acceptance_y_divy_maxdiv = DivPos_y_monitor(
   npos = 200, ndiv = 200, filename = "acceptance_y_divy_maxdiv", restore_neutron=1,
   xwidth = sampleSizeX, yheight = 2*sampleSizeY, maxdiv = 1.500000) WHEN (x_div<0.750000 && x_div>-0.750000)
 AT (0, 0, u) RELATIVE PREVIOUS

COMPONENT Lmon_sample = L_monitor(
    nL = 400, filename = "Lmon_sample", xwidth = sampleSizeX, restore_neutron=1,
    yheight = sampleSizeY, Lmin = 2, Lmax = 6)
  AT (0, 0,u) RELATIVE PREVIOUS

  COMPONENT Elowest = E_monitor(filename="E_lowest", xwidth =0.01, restore_neutron=1,
			     yheight=0.01, Emin=0, Emax=0.5, nE=51)
 AT (0,0,0) RELATIVE PREVIOUS
  
  COMPONENT Elow = E_monitor(filename="E_low", xwidth =0.01, restore_neutron=1,
			     yheight=0.01, Emin=0, Emax=100, nE=101)
 AT (0,0,0) RELATIVE PREVIOUS

COMPONENT Ehigh = E_monitor(filename="E_high", xwidth = 0.01, restore_neutron=1,
			     yheight = 0.01,Emin=100, Emax=100000, nE=96)
AT (0,0,0) RELATIVE PREVIOUS
  
  /* Simple curved guide : 
  
COMPONENT GuideR = Guide_curved(
    w1 = 0.1, h1 = 0.1, l = 50, curvature=3000)
  AT (0,0,0.001) RELATIVE PREVIOUS

  COMPONENT RArm=Arm()
  AT (0.416657,0,50.002) RELATIVE GuideR
  ROTATED (0, calcAlpha(50,3000),0) RELATIVE GuideR
  
  COMPONENT RArm2=Arm()
  AT (calcX(50, 3000),0,calcZ(50, 3000)) RELATIVE GuideR
  ROTATED (0, calcAlpha(50,3000),0) RELATIVE GuideR
  
COMPONENT Monitor2_xy1 = Monitor_nD(
    options = "x limits=[-0.06 0.06] bins=51, y limits=[-0.06 0.06] bins=51,", xwidth = 0.12, yheight = 0.12)
    AT (0, 0, 0.05) RELATIVE RArm */

/* /\* Uncomment these helper-arms to view "full" monolith *\/ */

COMPONENT DummyArm1 = Arm()
  AT (6,0,6) ABSOLUTE

COMPONENT DummyArm2 = Arm()
  AT (-6,0,6) ABSOLUTE

COMPONENT DummyArm3 = Arm()
  AT (-6,0,-6) ABSOLUTE

COMPONENT DummyArm4 = Arm()
  AT (6,0,-6) ABSOLUTE

COMPONENT DummyArm5 = Arm()
  AT (6,0,6) ABSOLUTE


FINALLY
%{
%}

END
