/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: test Test_Scatter_log_losses
*
* %Identification
* Written by: Erik B Knudsen (erkn@fysik.dtu.dk)
* Date: 2013
* Origin: DTU Fysik
* %INSTRUMENT_SITE: Templates
*
* Example instrument of Scatter_logger_log_losses feature usage for detection of lost instensity
*
* %Description
* 
* This instrument is an example of how to use the Scatter_logger family of components in McStas together
* WITH mcpl (Monte Carlo Particle List) 
* In this example the neutrons inensity that is not reflected by the neutron guide is logged, and later
* the log is processed to produce neutron intensity that is written as events to an MCPL-file 
* The guide length is parameterized by the instrument parameter LENGTH.
* 
* The logging region is marked by "start/end logging" comments
* whereas the log processing region is marked by "start/end log iteration" comments  
*
* Example: mcrun Test_Scatter_log_losses LENGTH=10
*
* %Parameters
* LENGTH: [m]  The length of the guide to be modelled
*
* %Link
* <a href="http://orbit.dtu.dk/files/57025387/prod11375088187360.NO_P_v8.pdf">Esben Klinkby talk at NOP&D 2013</a>
*
* %End
*******************************************************************************/
DEFINE INSTRUMENT Test_Scatter_log_losses(LENGTH=10, verbose=0)


/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
%}


/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
AT (0,0,0) ABSOLUTE

COMPONENT src = Source_simple(
    radius = 0.1, dist = 1, focus_xw = 0.1, focus_yh = 0.1, lambda0=5, dlambda=4.9)
AT (0, 0, 0) RELATIVE Origin

COMPONENT psd0=PSD_monitor(
    xwidth=0.1, yheight=0.1, filename="psd0")
AT(0,0,0.5) RELATIVE PREVIOUS

/*start the logging region*/
COMPONENT s1=Scatter_logger()
AT(0,0,1) RELATIVE src

COMPONENT guide_simple = Guide(
    w1 = 0.1, h1 = 0.1, w2 = 0.1, h2 = 0.1, l = LENGTH, R0 = 0.99,
    Qc = 0.0219, alpha = 6.07, m = 2, W = 0.003)
AT (0, 0, 1) RELATIVE src

COMPONENT s2=Scatter_logger_stop(logger=s1)
AT(0,0,0) RELATIVE PREVIOUS
/*end logging*/

/*start log iteration*/
COMPONENT a0=Arm()
AT(0,0,0) ABSOLUTE

COMPONENT iter1 = Scatter_log_iterator()
AT(0,0,0) ABSOLUTE

COMPONENT mcplout = MCPL_output(polarisationuse=1, doubleprec=1, verbose=1, merge_mpi=1, filename="lost")
AT(0,0,0) RELATIVE guide_simple

COMPONENT iter2 = Scatter_log_iterator_stop(iterator=iter1)
AT(0,0,0) RELATIVE iter1

COMPONENT a1 = Arm()
AT (0,0,0) ABSOLUTE
JUMP a0 WHEN(MC_GETPAR(iter2,loop))
/*end log iteration*/
 
/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END

